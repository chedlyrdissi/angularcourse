angular
CLI Deep Dive & Troubleshooting
In the next lecture, we're going to build our first little app!

If the CLI prompts you to answer some questions (some versions do that), you can simply hit ENTER for all questions. This will accept the default settings which are fine for this course.

The CLI generates a different welcome screen than you're going to see in my video though. No worries, you'll still be able to follow along without issues! Just make sure to code along so that your code equals mine - Angular itself didn't change a bit :)

-----

If you want to dive deeper into the CLI and learn more about its usage, have a look at its official documentation: https://github.com/angular/angular-cli/wiki

You encountered issues during the installation of the CLI or setup of a new Angular project?

A lot of problems are solved by making sure you're using the latest version of NodeJS, npm and the CLI itself.

Updating NodeJS:

Go to nodejs.org and download the latest version - uninstall (all) installed versions on your machine first.

Updating npm:

Run [sudo] npm install -g npm  (sudo  is only required on Mac/ Linux)

Updating the CLI

[sudo] npm uninstall -g angular-cli @angular/cli 

npm cache clean 

[sudo] npm install -g @angular/cli 

Here are some common issues & solutions:

Creation of a new project takes forever (longer than 3 minutes)
That happens on Windows from time to time => Try running the command line as administrator

You get an EADDR error (Address already in use)
You might already have another ng serve process running - make sure to quit that or use ng serve --port ANOTHERPORT  to serve your project on a new port

My changes are not reflected in the browser (App is not compiling)
Check if the window running ng serve  displays an error. If that's not the case, make sure you're using the latest CLI version and try restarting your CLI


property and event binding: google : YOUR_ELEMENT properties or YOUR_ELEMENT events

creating a project 

npm install -g angular-cli
ng new "projectname"


adding bootstrap
npm install --save bootstrap@3 

ng g c <component name> --spec false : create component without testing file
ng g c <component name> --skipTests true : create component without testing file

debuggin tool: augury

add @Input() decorator in front of property to be able to use property binding
@Input('<alias>') to use an <alias>
to make a property listenable from the outside we use

@output() event = new EventEmiter<>();
from outside user eventbinding on the property
like (myEvent)='action...'

to use element in the template without model we can use local reference:
#referenceName
then we call it using only referenceName

...something...
<ng-content></ng-content>
...something

with that whatever you put inside the component is kept


#reference  then @ViewChild('reference', {static: true(if used in onNGInit)/false})
same with @ContentChild(...) but used in ng-content
these return ElementRef

to make css available use encapsulation in Component

in directive to access element use class Renderer2

@HostListener('<event>') used in directives to listen to events
@HostBinding('<property of the host>') used in directives to modify property
	exp @HostBinding('style.backgroundColor') 
	can be used to add or remove classes to create a menu ( class name is open)

when making custom structural directives the name of the property must be the same as the name of the selector

<div [ngSwitch]="condition">
	<p *ngSwitchCase=" <case> "></p>
	<p *ngSwitchCase=" <case> "></p>
</div>

to make menu close on any outside click
@HostListener('document:click', ['$event']) toggleOpen(event: Event) {
    this.isOpen = this.elRef.nativeElement.contains(event.target) ? !this.isOpen : false;
  }

when creating a service use the provider key in @Component: it takes an array and the class of the service.

the service can be inherited by child components if we don't include it in the prividers array.
meaning if you declare a service in the parent's providers array and you don't in it's children they'll share that instance.
PS: the service still needs to be in the constructor.

hierarchy of the Service:
app.module
app.component
<your component parent to child>
<last child>

to inject a service into another service the parent service needs to have metaData attached to it
a component has metadata because it has @Component
a directive has metadata because it has @Directive

you can use @Injectable() on the receiving service

to avoid having to use a chain of event emitters and property/event binding
use event emitters in a service and subscribe to the event emitter

class service{
	event: EventEmitter<object>;
}
class2{
	function whatever () {
		this.serivice.event.subscribe(
			( parameters ) => your code
		); // this wraps an observable
	}
}

to return a copy of list instead of reference use this.recipes.slice()

setTimeout( func, time ) calls func after time